<?php

/**
 * @file
 * Email Contact module file.
 */

use Drupal\Component\Utility\Html;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;


/**
 * Return emails from node and given field name
 * @param string $type
 *  type of requested node
 * @param string $id
 *  The id of the requested node
 * @param object $field_name
 *  name of the email field
 *
 * @return array
 *  array with valid email addresses
 *
 */
function email_contact_get_emails_from_field($type, $id, $field_name) {
  if (!is_numeric($id)) {
    throw new NotFoundHttpException();
  }

  $node = node_load($id);

  // Check that the entity exists and has the right type
  if ($node === NULL || $node->getType() != $type) {
    throw new NotFoundHttpException();
  }

  // Check that the field exists and has the right type
  if (!$node->hasField($field_name)) {
    throw new NotFoundHttpException();
  }
  $field = $node->get($field_name);

  if ($field === NULL || $field->getFieldDefinition()->getType() != 'email') {
    throw new NotFoundHttpException();
  }

  // Load email addresses
  foreach ($field->getIterator() as $item) {
    $value = $item->getValue()['value'];
    if (!empty($value) && strpos($value, '@') !== FALSE) {
        $emails[] = $value;
    }
  }

  // Verify that the email address is not empty.
  if (empty($emails)) {
    throw new NotFoundHttpException();
  }
  return $emails;
}

/**
 * Implements hook_mail().
 */
function email_contact_mail($key, &$message, $params) {
  switch ($key) {
    case 'contact':
      // Compose the body.
      $token = Drupal::token();
      $message['body'][] = $token->replace($params['default_message']);
      $message['body'][] = $params['message'];
      $message['subject'] = "";

      // Include the title of the entity, if one exists.
      $message['subject'] .= " " . Html::escape($params['subject']);
      break;
  }
}
